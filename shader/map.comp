#version 450

#extension GL_KHR_shader_subgroup_vote: enable

layout(local_size_x = 1024) in;

struct Triangle{
    vec2 points[3];
} triangle;

#define TRIANGLE_N 10
layout(set = 0, binding = 0) readonly buffer DataBuffer {
    Triangle[] data_buf;
};

layout(set = 0, binding = 1) readonly buffer InBuffer {
    vec2[] in_buf;
};

layout(set = 0, binding = 2) buffer OutBuffer {
    uint[] out_buf;
};

bool isInside(Triangle triangle, vec2 P){
    vec2 A = triangle.points[0];
    vec2 B = triangle.points[1];
    vec2 C = triangle.points[2];

    vec2 v0 = C - A;
    vec2 v1 = B - A;
    vec2 v2 = P - A;

    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);

    float invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    return (u >= 0) && (v >= 0) && (u + v < 1);
}


void main() {
    uint global_xi = gl_GlobalInvocationID.x;

    bool isInTriangle = false;
    for (int i = 0; i<TRIANGLE_N; i++){
        isInTriangle = isInTriangle || isInside(data_buf[i], in_buf[global_xi]);
    }

    out_buf[global_xi] = int(isInTriangle);
}
